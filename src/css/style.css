/* style.cs: BYU IT&C 210a Boilerplate Stylesheet */

/* We use the Material Icons font in some of the styles. This brings in
the corresponding fonts from Google Fonts. */
@import url("https://fonts.googleapis.com/icon?family=Material+Icons");

/* Import custom font for title */
@import url('https://fonts.googleapis.com/css2?family=Merriweather:wght@700&display=swap');

/* The root rule is the foundation for the whole page. These settings _cascade_
to all elements unless they are overridden. */
:root {
	/* Theme variables */
	--primary: #00ff88;
	--accent: #00ff88;
	--delete: #042904;
	--primary-text: #0e0d0d;

	/* Page background */
    background-color: #0d0d0d;
    background-image:
      linear-gradient(90deg, #222 1px, transparent 1px),
      linear-gradient(180deg, #222 1px, transparent 1px);
    background-size: 32px 32px;
    background-repeat: repeat;
    background-position: center center;
}

body {
	/* Window style */
	max-width: 50rem;
	margin: 2rem auto;
	border: 2px solid #00ff88;   /* neon green border */
	border-radius: 8px;
	padding: 1.5rem;

	/* Terminal look */
	color: white;
	font: 1.3rem Inconsolata, monospace;
	text-shadow: 0 0 5px #00ff88;
	background-color: black;
	background-image: radial-gradient(
		rgba(0, 150, 0, 0.75), black 120%
	);
	height: 80vh;
	overflow: hidden;
	position: relative;
}

/* Scanline effect overlay */
body::after {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: repeating-linear-gradient(
		0deg,
		rgba(0, 0, 0, 0.15),
		rgba(0, 0, 0, 0.15) 1px,
		transparent 1px,
		transparent 2px
	);
	pointer-events: none;
}

::selection {
	background: var(--accent);
	color: black;
}


h1 {
    font-family: "Fira Code", monospace;
	color: white;
}

nav {
    color: black;				/* Nav bar is white on very dark gray */
    background-color: var(--delete);
    border-radius: 8px;
    border: 2px solid var(--primary);
    padding: .25em 0.75rem;			  /* Give the nav bar some internal padding */
}

nav a {
	color: var(--primary);		/* Links in the nav bar are light blue instead of white */		  /* Don't underline links in the nav bar */
	padding: 0.25em 0.75em;
	background: transparent;
}

/* These with class selectors take effect when you apply the corresponding class name on an element */

.tasklist {
	padding-left: 0;		/* Remove padding that <ul> has by default */
	list-style-type: none;	/* No bullets in the list */
}

.task {
	display: flex;
	align-items: center;
	width: 100%;
	box-sizing: border-box;
}

.task-done {
	display: inline-block;
	box-sizing: border-box;
	text-decoration: line-through;
	/* Add property to change checkbox icon color */
	accent-color: var(--accent);
}

.task-description {
	display: inline-block;
	width: calc(100% - 12em);
	box-sizing: border-box;
}

.task-date {
	display: inline-block;
	width: 6em;
	margin-right: 0.5em;
}

.task-delete {
	display: inline-block;
	box-sizing: border-box;
	/* Add property to change delete icon color */
	color:var(--accent);
	margin-left: auto;
}

.material-icon {
	border: none; /* No border */
	background: none; /* Match the background of the parent */
	font-family: 'Material Icons'; /* Use the icon font */
	font-size: inherit; /* Input doesn't automatically inherit font size. This brings it in. */
	cursor: pointer; /* Change the cursor to a pointer when hovering on this element */
	
}

/* Add your custom class rules here */

.example {
	color: var(--primary-text);
}

@media (max-width: 600px) {
	body {
		max-width: 70%;
		padding: 0.5em !important;
		font-size: 1em;
	}
	form {
		margin: 1em auto !important;
		padding: 0.5em;
	}
	.task-description, .task-date, .task-delete {
		width: 100%;
		display: block;
		margin: 0.5em 0;
	}
	h1 {
		font-size: 1.5em;
	}
	.input-description {
		font-size: 1em;
	}
}

form {
	margin: 2em auto !important;
	border: 2px solid var(--primary);
	border-radius: 8px;
	padding: 1em;
	background: var(--delete);
	color: var(--primary);
	box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

/* Rule for completed tasks */
.task-completed {
  text-decoration: line-through;
}

.input-description {
	width: 100%;
	box-sizing: border-box;
    color: var(--delete);
    font-family: inherit;
	font-size: 1em;
}

.task-button {
	background-color: var(--delete);
	color: var(--primary);
    font-family: inherit;
}

input.checkbox-icon {
	font-family: 'Material Icons';
    font-size: inherit;  /* Input doesn't automatically inherit font size. This brings it in. */
	appearance: none;    /* Hide the existing checkbox so that the new rendering will overlay it */
	cursor: pointer;     /* Change the cursor to a pointer when hovering on this element */
}

input.checkbox-icon:before {
	content: 'check_box_outline_blank';
}

input.checkbox-icon:checked:before {
	content: 'check_box';
}

/* For the toggle switches */

/* Toggle Switch */
input.toggle-switch {
	vertical-align: middle;
    font-size: 1em;      
	appearance: none;    
	position: relative;  
	cursor: pointer;     
	margin: 0em 0.2em;   
    width: 1.4em; 		 
    height: 0.8em;
} 

/* Use the :after pseudo-element to create an oval as the surface of the button. */
input.toggle-switch:after {
    vertical-align: middle;	/* Center this vertically */
	content: '';            /* Empty text content. But still required to establish the element */
	display: inline-block;  /* Inline-block makes it take up rectangular space */
    position: absolute;	    /* Absolute positioning without left and top locates this exactly on top of the input.toggle-switch */
	width: 1.4em;           /* Width and height of the oval */
	height: 0.6em;
	background-color: rgb(128,128,128); /* Light gray fill */
	border-radius: 0.3em;   /* Border radius of half the height makes this an oval instead of a rectangle */
}

/* Use the :before pseudo-element to create a circle as the toggle handle */
input.toggle-switch:before {
    vertical-align: middle; /* Center this vertically thereby aligning to the background oval */
	content: '';            /* Empty text content required to take up any space */
	display: inline-block;  /* Inline-block makes it take up rectangular space */
	position: absolute;		/* Absolute positioning without x and y locates this on top of the input.toggle-switch */
	width: 0.7em;           /* Width and height are the same making it take up a square space which will be round with the border-radius */
	height: 0.7em;
    z-index: 1;				/* Z-index of 1 positions this on top of the input.toggle-switch:after */
	left: 0;                /* Position at the left edge of the parent checkbox (it will shift right when activated) */
	top: -0.1em;            /* Center it vertically on the background oval - tweaked to position just right */
	border: 1px solid var(--primary); /* border is the same color as the background oval */
	border-radius: 0.6em;   /* Radious greater than 1/2 the height/width makes a circle */
	background-color: var(--delete);  /* Fill with white */
	box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6); /* Cast a shadow on the background */
	transition-duration: 0.3s; /* Animate turning on or off over 0.3 seconds */
}

/* Shift the handle to the right when turned on */
input.toggle-switch:checked:before {
	left: 0.7em;            /* When turned on, shift to the right */
	box-shadow: -1px 1px 3px rgba(0, 0, 0, 0.6); /* When turned on, cast the shadow the other direction */
}

/* Change the background color to green when turned on */
input.toggle-switch:checked:after {
	background-color: var(--primary);
}